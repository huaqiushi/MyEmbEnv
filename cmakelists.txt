set(CMAKE_SYSTEM_NAME generic)
set(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.0)

#cross compilers and tools
set(CMAKE_C_COMPILER "D:/gcc-arm-none-eabi/bin/arm-none-eabi-gcc.exe")
set(CMAKE_CXX_COMPILER "D:/gcc-arm-none-eabi/bin/arm-none-eabi-g++.exe")
set(CMAKE_ASM_COMPILER "D:/gcc-arm-none-eabi/bin/arm-none-eabi-gcc.exe")
set(CMAKE_AR "D:/gcc-arm-none-eabi/bin/arm-none-eabi-gcc-ar.exe")
set(CMAKE_OBJCOPY "D:/gcc-arm-none-eabi/bin/arm-none-eabi-objcopy.exe")
set(CMAKE_OBJDUMP "D:/gcc-arm-none-eabi/bin/arm-none-eabi-objdump.exe")
set(SIZE arm_none_eabi_size)
#skip compiler checks
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(TARGET_FILE "C:/Users/admin/Desktop/Temp/git_demo/out/build/git_demo")

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")  # 静态链接调试运行时库
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")  # 静态链接发布运行时库

project(git_demo C ASM CXX)
set(CXX_STANDARD 17)
set(C_STANDARD 11)

add_compile_options(-mcpu=cortex-m23 -mthumb -mfloat-abi=soft -mfpu=fpv4-sp-d16)
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)

#Enable assembler files preprocessing
add_compile_options($<$<COMPILE_LANGUAGE:ASM>:-x$<SEMICOLON>assembler-with-cpp>)

if ("${CMAKE_BULID_TYPE}" STREQUAL "Release")
    message(STATUS "Maximum optimazation level")
    add_compile_options(-Ofast)
else()
    add_compile_options(-Og -g)
endif()

include_directories(
    ./
    "${CMAKE_SOURCE_DIR}/Inc",
    "D:\\gcc-arm-none-eabi\\arm-none-eabi\\include",
    "${CMAKE_SOURCE_DIR}/Firmware/CMSIS/GD/GD32E23x/Include",
    "${CMAKE_SOURCE_DIR}/Firmware/GD32E23x_standard_peripheral/Include",
    "C:/Users/admin/AppData/Local/Arm/Packs/ARM/CMSIS/5.8.0/CMSIS/Core/Include",
    "${CMAKE_SOURCE_DIR}/main"
)

add_definitions(-DGD32E230)

aux_source_directory(${CMAKE_SOURCE_DIR}/Firmware/GD32E23x_standard_peripheral/Source HAL_DRIVER)
aux_source_directory(${CMAKE_SOURCE_DIR}/Firmware/CMSIS/GD/GD32E23x/Source SYSTEM)
aux_source_directory(${CMAKE_SOURCE_DIR}/ MAIN)

set(STARTUP     ${CMAKE_SOURCE_DIR}/Firmware/CMSIS/GD/GD32E23x/Source/ARM/startup_gd32e23x.S)
set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/gd32e23x_flash.ld)

add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map)
add_link_options(-mcpu=cortex-m23 -mthumb -mthumb-interwork)
add_link_options(-T ${LINKER_SCRIPT})

add_executable(${PROJECT_NAME}.elf ${HAL_DRIVER} ${SYSTEM} ${MAIN} ${STARTUP} ${LINKER_SCRIPT})

set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)

add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
        COMMAND ${CMAKE_OBJCOPY} -Oihex ${TARGET_FILE}/${PROJECT_NAME}.elf ${HEX_FILE}
        COMMAND ${CMAKE_OBJCOPY} -Obinary ${TARGET_FILE}/${PROJECT_NAME}.elf ${BIN_FILE}
        COMMENT "Building ${HEX_FILE}
Building ${BIN_FILE}")
